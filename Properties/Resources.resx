<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ArgDescContainerCreateId" xml:space="preserve">
    <value>The ID of the container to create, if it does not already exist.</value>
  </data>
  <data name="ArgDescContainerDatabaseId" xml:space="preserve">
    <value>The name of the database to operate on.</value>
  </data>
  <data name="ArgDescContainerDeleteId" xml:space="preserve">
    <value>Delete an existing container.
NOTE: An exception will be thrown if either the DB or container does not exist.</value>
  </data>
  <data name="ArgDescContainerInitDB" xml:space="preserve">
    <value>Initializes/creates the specified database if it does not exist.</value>
  </data>
  <data name="ArgDescContainerPartitionPath" xml:space="preserve">
    <value>Partition key path.</value>
  </data>
  <data name="ArgDescContainerThroughput" xml:space="preserve">
    <value>Throughput (RU/sec).</value>
  </data>
  <data name="ArgDescDatabaseCreateId" xml:space="preserve">
    <value>The ID of the database to create, if it does not already exist.</value>
  </data>
  <data name="ArgDescDatabaseDeleteId" xml:space="preserve">
    <value>Delete an existing database.
NOTE: An exception will be thrown if the DB does not exist.</value>
  </data>
  <data name="ArgDescItemContainerId" xml:space="preserve">
    <value>The name of the container to operate on.</value>
  </data>
  <data name="ArgDescItemCreateItem" xml:space="preserve">
    <value>The JSON data to write to a new item in the specified container.
NOTE: An exception will be thrown if the container does not exist.</value>
  </data>
  <data name="ArgDescItemDatabaseId" xml:space="preserve">
    <value>The name of the database to operate on.</value>
  </data>
  <data name="ArgDescItemDeleteId" xml:space="preserve">
    <value>The item, containing the specified ID (example: GUID), to delete.
NOTE: An exception will be thrown if the container does not exist.</value>
  </data>
  <data name="ArgDescItemInitAll" xml:space="preserve">
    <value>Initializes/creates the specified database and/or container if they do not exist.</value>
  </data>
  <data name="ArgDescItemPartitionKey" xml:space="preserve">
    <value>Partition key value.
NOTE: If omitted, the ID and partition key value will be assumed to be the same.</value>
  </data>
  <data name="ArgDescItemPartitionPath" xml:space="preserve">
    <value>Partition key path.
NOTE: If omitted, the ID will be inferred.</value>
  </data>
  <data name="ArgDescItemThroughput" xml:space="preserve">
    <value>Throughput (RU/sec)</value>
  </data>
  <data name="CmdDescContainer" xml:space="preserve">
    <value>Interact with Cosmos DB container management</value>
  </data>
  <data name="CmdDescDatabase" xml:space="preserve">
    <value>Interact with Cosmos DB database management</value>
  </data>
  <data name="CmdDescItem" xml:space="preserve">
    <value>Interact with Cosmos DB item management</value>
  </data>
  <data name="CmdDescRoot" xml:space="preserve">
    <value>A command line utility for interacting with an instance of Cosmos DB.</value>
  </data>
  <data name="LogMsgError" xml:space="preserve">
    <value>Error. ({0})</value>
    <comment>{0} = The response's HTTP status code</comment>
  </data>
  <data name="LogMsgRequestCharge" xml:space="preserve">
    <value>Request Charge: {0}</value>
    <comment>{0} = The response's reported request charge</comment>
  </data>
  <data name="LogMsgSuccess" xml:space="preserve">
    <value>Success. ({0})</value>
    <comment>{0} = The response's HTTP status code</comment>
  </data>
  <data name="ValidateErrMsgCreateXorDelete" xml:space="preserve">
    <value>One and only one of the following options shall be present: {0}, {1}</value>
    <comment>{0} = The create option string for the associated command
{1} = The delete option string for the associated command</comment>
  </data>
</root>